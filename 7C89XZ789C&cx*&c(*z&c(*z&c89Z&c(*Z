# ===== SETUP LOG FILE =====
$LogFile = Join-Path -Path $PSScriptRoot -ChildPath "PCCheckLog.txt"
"===== SIMMS PC CHECKER LOG =====" | Out-File -FilePath $LogFile -Encoding UTF8
"Started: $(Get-Date)" | Out-File -FilePath $LogFile -Append -Encoding UTF8
"`n" | Out-File -FilePath $LogFile -Append -Encoding UTF8

# ===== FUNCTION TO SHOW HEADER (Rainbow Banner) =====
function Show-Header {
    Clear-Host
    $rainbow = @("Red","Yellow","Green","Cyan","Blue","Magenta")
    $i = 0
    $ascii = @'
  ____  _                           ____   ____ 
 / ___|(_)_ __ ___  _ __ ___  ___  |  _ \ / ___|
 \___ \| | '_ ` _ \| '_ ` _ \/ __| | |_) | |    
  ___) | | | | | | | | | | | \__ \ |  __/| |___ 
 |____/|_|_| |_| |_|_| |_| |_|___/ |_|    \____|
  / ___| |__   ___  ___| | _____ _ __           
 | |   | '_ \ / _ \/ __| |/ / _ \ '__|          
 | |___| | | |  __/ (__|   <  __/ |             
  \____|_| |_|\___|\___|_|\_\___|_|             
'@ -split "`n"
    foreach ($line in $ascii) {
        $color = $rainbow[$i % $rainbow.Count]
        Write-Host $line -ForegroundColor $color
        $i++
    }
    Write-Host ""
}

# ===== FUNCTION TO SHOW END CARD =====
function Show-EndCard {
    Clear-Host
    $rainbow = @("Cyan","Green","Magenta","Yellow","Blue","Red")
    $i = 0
    $ascii = @'
__________                ___.
\______   \___.__. ____   \_ |__ ___.__. ____ 
 |    |  _<   |  |/ __ \   | __ <   |  |/ __ \ 
 |    |   \\___  \  ___/   | \_\ \___  \  ___/ 
 |______  // ____|\___  >  |___  / ____|\___  >
        \/ \/         \/       \/\/         \/ 
'@ -split "`n"
    foreach ($line in $ascii) {
        $color = $rainbow[$i % $rainbow.Count]
        Write-Host $line -ForegroundColor $color
        $i++
    }
    Write-Host ""
}

# ===== FUNCTION TO SHOW BYE BYE =====
function Show-Goodbye {
    Clear-Host
    $rainbow = @("Yellow","Red","Blue","Magenta","Cyan","Green")
    $i = 0
    $ascii = @'
  ____               ____             
 | __ ) _   _  ___  | __ ) _   _  ___ 
 |  _ \| | | |/ _ \ |  _ \| | | |/ _ \
 | |_) | |_| |  __/ | |_) | |_| |  __/
 |____/ \__, |\___| |____/ \__, |\___|
        |___/              |___/      
'@ -split "`n"
    foreach ($line in $ascii) {
        $color = $rainbow[$i % $rainbow.Count]
        Write-Host $line -ForegroundColor $color
        $i++
    }
    Write-Host ""
}

# ===== FUNCTION FOR STEPS =====
function Step {
    param([string]$Message,[scriptblock]$Action)
    Show-Header
    Write-Host "Step: $Message" -ForegroundColor Yellow
    "`n===== $Message =====`n" | Out-File -FilePath $LogFile -Append -Encoding UTF8
    Read-Host "Press ENTER to continue"
    if ($Action) { & $Action }
}

# ===============================
# SIMMS PC CHECKER MEGA SEQUENCE
# ===============================

Step -Message "Opening Prefetch folder..." -Action {
    Start-Process "explorer.exe" "C:\Windows\Prefetch"
}

Step -Message "Opening Temp folder..." -Action {
    Start-Process "explorer.exe" "C:\Windows\Temp"
}

Step -Message "Opening AppData folder..." -Action {
    Start-Process "explorer.exe" "$env:APPDATA"
}

Step -Message "Opening ProgramData folder..." -Action {
    Start-Process "explorer.exe" "C:\ProgramData"
}

# --- Registry Queries (logged + read-only) ---
Step -Message "Querying BAM UserSettings registry key..." -Action {
    reg.exe query "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\bam\State\UserSettings" | Tee-Object -FilePath $LogFile -Append
    Read-Host "Review results above. Press ENTER to continue"
}

Step -Message "Querying Compatibility Assistant Store registry key..." -Action {
    reg.exe query "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Compatibility Assistant\Store" | Tee-Object -FilePath $LogFile -Append
    Read-Host "Review results above. Press ENTER to continue"
}

Step -Message "Querying AppSwitched registry key..." -Action {
    reg.exe query "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FeatureUsage\AppSwitched" | Tee-Object -FilePath $LogFile -Append
    Read-Host "Review results above. Press ENTER to continue"
}

Step -Message "Querying MuiCache registry key..." -Action {
    reg.exe query "HKEY_CLASSES_ROOT\Local Settings\Software\Microsoft\Windows\Shell\MuiCache" | Tee-Object -FilePath $LogFile -Append
    Read-Host "Review results above. Press ENTER to continue"
}

# --- SmartScreen Scan ---
Step -Message "Scanning C:\ drive for files named smartscreen..." -Action {
    Get-ChildItem -Path C:\ -Recurse -Force -ErrorAction SilentlyContinue |
        Where-Object { $_.Name -like "smartscreen*" -and $_.PSIsContainer -eq $false } |
        Select-Object FullName |
        Tee-Object -FilePath $LogFile -Append |
        Format-Table -AutoSize
    Read-Host "Scan complete. Press ENTER to continue"
}

# ===== END CARD =====
Step -Message "All checks completed! Displaying end card..." -Action {
    Show-EndCard
    Read-Host "Press ENTER to finish"
}

# ===== GOODBYE CARD =====
Show-Goodbye
"===== END OF LOG =====" | Out-File -FilePath $LogFile -Append -Encoding UTF8
"Finished: $(Get-Date)" | Out-File -FilePath $LogFile -Append -Encoding UTF8
