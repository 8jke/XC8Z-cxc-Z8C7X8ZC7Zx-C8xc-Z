# Prevent command echo
$Host.UI.RawUI.WindowTitle = "Simm's PC Checker"
$ProgressPreference = "SilentlyContinue"

# Remove close button + disable Ctrl+C
$null = [console]::TreatControlCAsInput = $true
Add-Type @"
using System;
using System.Runtime.InteropServices;
public class Win32 {
    [DllImport("user32.dll")]
    public static extern IntPtr GetSystemMenu(IntPtr hWnd, bool bRevert);
    [DllImport("user32.dll")]
    public static extern bool DeleteMenu(IntPtr hMenu, int uPosition, int uFlags);
    [DllImport("user32.dll")]
    public static extern IntPtr GetForegroundWindow();
}
"@
$handle = [Win32]::GetForegroundWindow()
$sysMenu = [Win32]::GetSystemMenu($handle, $false)
[Win32]::DeleteMenu($sysMenu, 0xF060, 0) # X
[Win32]::DeleteMenu($sysMenu, 0xF040, 0) # Close
[Win32]::DeleteMenu($sysMenu, 0xF020, 0) # Minimize
[Win32]::DeleteMenu($sysMenu, 0xF030, 0) # Maximize

# Function for fake loading bars
function Show-LoadingBar {
    param(
        [string]$message,
        [string]$color = "Green",
        [int]$delay = 120,
        [switch]$beep
    )
    Write-Host "`n$message" -ForegroundColor $color
    $bar = ""
    for ($i = 0; $i -le 20; $i++) {
        $bar = "#" * $i
        $percent = [int](($i/20)*100)
        Write-Host ("[" + $bar.PadRight(20) + "] $percent%") -ForegroundColor $color
        Start-Sleep -Milliseconds $delay
        [Console]::SetCursorPosition(0, [Console]::CursorTop -1)
    }
    Write-Host ("[" + ("#"*20) + "] 100%") -ForegroundColor $color
    if ($beep) { [console]::beep(600,300) }
    Start-Sleep -Milliseconds 500
}

# Ambient creepy loop in background
Start-Job {
    while ($true) {
        [console]::beep(200,400)
        Start-Sleep -Milliseconds 2000
        [console]::beep(180,300)
        Start-Sleep -Milliseconds 3500
    }
} | Out-Null

# --- Main Banner ---
Clear-Host
Write-Host "
  _________.__                         ___________________   _________ .__                   __                 
 /   _____/|__| _____   _____   ______ \______   \_   ___ \  \_   ___ \|  |__   ____   ____ |  | __ ___________ 
 \_____  \ |  |/     \ /     \ /  ___/  |     ___/    \  \/  /    \  \/|  |  \_/ __ \_/ ___\|  |/ // __ \_  __ \
 /        \|  |  Y Y  \  Y Y  \\___ \   |    |   \     \____ \     \___|   Y  \  ___/\  \___|    <\  ___/|  | \/
 /_______  /|__|__|_|  /__|_|  /____  >  |____|    \______  /  \______  /___|  /\___  >\___  >__|_ \\___  >__|   
         \/          \/      \/     \/                    \/          \/     \/     \/     \/     \/    \/       
" -ForegroundColor Green

Start-Sleep -Seconds 2

# --- Prefetch Step ---
Clear-Host
Write-Host "
[ Opening Prefetch Viewer... ]
" -ForegroundColor Green
Start-Process prefetch
Write-Host "`nPress ENTER to continue..."
$null = Read-Host

# --- Regedit Step ---
Clear-Host
Write-Host "
[ Opening Registry at AppCompatFlags Store... ]
" -ForegroundColor Green
Start-Process "regedit.exe" -ArgumentList "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Compatibility Assistant\Store"
Write-Host "`nPress ENTER to continue..."
$null = Read-Host

# --- End Card Banner ---
Clear-Host
Write-Host "
 __________                ___.                 
 \______   \___.__. ____   \_ |__ ___.__. ____  
  |    |  _<   |  |/ __ \   | __ <   |  |/ __ \ 
  |    |   \\___  \  ___/   | \_\ \___  \  ___/ 
  |______  // ____|\___  >  |___  / ____|\___  >
         \/ \/         \/       \/\/         \/ 
" -ForegroundColor Green

Start-Sleep -Seconds 3

# --- Fake Hack Prank ---
Clear-Host
Write-Host "[ SYSTEM BREACH DETECTED ]" -ForegroundColor Red
Start-Sleep 2

$fakeSteps = @(
    "Connecting to remote server...",
    "Bypassing firewall...",
    "Accessing kernel32.dll...",
    "Dumping LSASS memory...",
    "Extracting Chrome passwords...",
    "Uploading documents to 185.###.###.###..."
)

foreach ($step in $fakeSteps) {
    Show-LoadingBar -message $step -color "Green" -delay 120
}

# Slower red scary steps with beeps
$redSteps = @(
    "Deleting System32...",
    "Injecting rootkit...",
    "Escalating privileges...",
    "Encrypting files..."
)

foreach ($step in $redSteps) {
    if ($step -eq "Encrypting files...") {
        Show-LoadingBar -message $step -color "Red" -delay 600 -beep
    } else {
        Show-LoadingBar -message $step -color "Red" -delay 300 -beep
    }
}

# --- Are you ready screen ---
Clear-Host
Write-Host "`nAre you ready for the end result...`n" -ForegroundColor Yellow
Write-Host "Press ENTER to continue..." -ForegroundColor DarkYellow

# Lock input until ENTER
do {
    $key = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
} until ($key.VirtualKeyCode -eq 13)

# --- Final Beep Sequence ---
for ($i=400; $i -lt 2000; $i+=200) {
    [console]::beep($i,200)
}
Start-Sleep -Seconds 1

# --- SIKE Reveal ---
Clear-Host
Write-Host "
███████╗██╗ ██████╗ ██╗  ██╗███████╗
██╔════╝██║██╔═══██╗██║ ██╔╝██╔════╝
███████╗██║██║   ██║█████╔╝ █████╗  
╚════██║██║██║   ██║██╔═██╗ ██╔══╝  
███████║██║╚██████╔╝██║  ██╗███████╗
╚══════╝╚═╝ ╚═════╝ ╚═╝  ╚═╝╚══════╝
" -ForegroundColor Red

Write-Host "`nRelax... you’re safe. This was just a joke! 😆`n" -ForegroundColor Green

# Stop ambient sounds
Get-Job | Remove-Job -Force
Start-Sleep 5

exit
